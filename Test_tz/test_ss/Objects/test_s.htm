<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\test_s.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\test_s.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Thu Mar 30 17:30:26 2023
<BR><P>
<H3>Maximum Stack Usage =         76 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7]">SVC_Handler</a>
 <LI><a href="#[9]">PendSV_Handler</a>
 <LI><a href="#[a]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">BRIDGE_ERROR_Handler</a> from startup_sse310mps3.o(.text.BRIDGE_ERROR_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_sse310mps3.o(.text.BusFault_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[15]">COMBINED_PPU_Handler</a> from startup_sse310mps3.o(.text.COMBINED_PPU_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[18]">CPU0_CTI_0_Handler</a> from startup_sse310mps3.o(.text.CPU0_CTI_0_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[19]">CPU0_CTI_1_Handler</a> from startup_sse310mps3.o(.text.CPU0_CTI_1_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[34]">DMA_Ch_0_Combined_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_0_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[32]">DMA_Ch_0_Error_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_0_Error_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[33]">DMA_Ch_0_Terminal_Count_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_0_Terminal_Count_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[37]">DMA_Ch_1_Combined_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_1_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[35]">DMA_Ch_1_Error_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_1_Error_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[36]">DMA_Ch_1_Terminal_Count_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_1_Terminal_Count_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[3a]">DMA_Ch_2_Combined_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_2_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[38]">DMA_Ch_2_Error_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_2_Error_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[39]">DMA_Ch_2_Terminal_Count_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_2_Terminal_Count_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[3d]">DMA_Ch_3_Combined_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_3_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[3b]">DMA_Ch_3_Error_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_3_Error_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[3c]">DMA_Ch_3_Terminal_Count_Handler</a> from startup_sse310mps3.o(.text.DMA_Ch_3_Terminal_Count_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_sse310mps3.o(.text.DebugMon_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[2b]">ETHERNET_Handler</a> from startup_sse310mps3.o(.text.ETHERNET_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[16]">ETHOS_U55_Handler</a> from startup_sse310mps3.o(.text.ETHOS_U55_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[42]">GPIO0_0_Handler</a> from startup_sse310mps3.o(.text.GPIO0_0_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[4c]">GPIO0_10_Handler</a> from startup_sse310mps3.o(.text.GPIO0_10_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[4d]">GPIO0_11_Handler</a> from startup_sse310mps3.o(.text.GPIO0_11_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[4e]">GPIO0_12_Handler</a> from startup_sse310mps3.o(.text.GPIO0_12_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[4f]">GPIO0_13_Handler</a> from startup_sse310mps3.o(.text.GPIO0_13_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[50]">GPIO0_14_Handler</a> from startup_sse310mps3.o(.text.GPIO0_14_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[51]">GPIO0_15_Handler</a> from startup_sse310mps3.o(.text.GPIO0_15_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[43]">GPIO0_1_Handler</a> from startup_sse310mps3.o(.text.GPIO0_1_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[44]">GPIO0_2_Handler</a> from startup_sse310mps3.o(.text.GPIO0_2_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[45]">GPIO0_3_Handler</a> from startup_sse310mps3.o(.text.GPIO0_3_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[46]">GPIO0_4_Handler</a> from startup_sse310mps3.o(.text.GPIO0_4_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[47]">GPIO0_5_Handler</a> from startup_sse310mps3.o(.text.GPIO0_5_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[48]">GPIO0_6_Handler</a> from startup_sse310mps3.o(.text.GPIO0_6_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[49]">GPIO0_7_Handler</a> from startup_sse310mps3.o(.text.GPIO0_7_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[4a]">GPIO0_8_Handler</a> from startup_sse310mps3.o(.text.GPIO0_8_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[4b]">GPIO0_9_Handler</a> from startup_sse310mps3.o(.text.GPIO0_9_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[3e]">GPIO0_Combined_Handler</a> from startup_sse310mps3.o(.text.GPIO0_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[52]">GPIO1_0_Handler</a> from startup_sse310mps3.o(.text.GPIO1_0_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[5c]">GPIO1_10_Handler</a> from startup_sse310mps3.o(.text.GPIO1_10_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[5d]">GPIO1_11_Handler</a> from startup_sse310mps3.o(.text.GPIO1_11_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[5e]">GPIO1_12_Handler</a> from startup_sse310mps3.o(.text.GPIO1_12_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[5f]">GPIO1_13_Handler</a> from startup_sse310mps3.o(.text.GPIO1_13_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[60]">GPIO1_14_Handler</a> from startup_sse310mps3.o(.text.GPIO1_14_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[61]">GPIO1_15_Handler</a> from startup_sse310mps3.o(.text.GPIO1_15_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[53]">GPIO1_1_Handler</a> from startup_sse310mps3.o(.text.GPIO1_1_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[54]">GPIO1_2_Handler</a> from startup_sse310mps3.o(.text.GPIO1_2_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[55]">GPIO1_3_Handler</a> from startup_sse310mps3.o(.text.GPIO1_3_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[56]">GPIO1_4_Handler</a> from startup_sse310mps3.o(.text.GPIO1_4_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[57]">GPIO1_5_Handler</a> from startup_sse310mps3.o(.text.GPIO1_5_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[58]">GPIO1_6_Handler</a> from startup_sse310mps3.o(.text.GPIO1_6_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[59]">GPIO1_7_Handler</a> from startup_sse310mps3.o(.text.GPIO1_7_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[5a]">GPIO1_8_Handler</a> from startup_sse310mps3.o(.text.GPIO1_8_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[5b]">GPIO1_9_Handler</a> from startup_sse310mps3.o(.text.GPIO1_9_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[3f]">GPIO1_Combined_Handler</a> from startup_sse310mps3.o(.text.GPIO1_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[62]">GPIO2_0_Handler</a> from startup_sse310mps3.o(.text.GPIO2_0_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[6c]">GPIO2_10_Handler</a> from startup_sse310mps3.o(.text.GPIO2_10_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[6d]">GPIO2_11_Handler</a> from startup_sse310mps3.o(.text.GPIO2_11_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[6e]">GPIO2_12_Handler</a> from startup_sse310mps3.o(.text.GPIO2_12_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[6f]">GPIO2_13_Handler</a> from startup_sse310mps3.o(.text.GPIO2_13_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[70]">GPIO2_14_Handler</a> from startup_sse310mps3.o(.text.GPIO2_14_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[71]">GPIO2_15_Handler</a> from startup_sse310mps3.o(.text.GPIO2_15_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[63]">GPIO2_1_Handler</a> from startup_sse310mps3.o(.text.GPIO2_1_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[64]">GPIO2_2_Handler</a> from startup_sse310mps3.o(.text.GPIO2_2_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[65]">GPIO2_3_Handler</a> from startup_sse310mps3.o(.text.GPIO2_3_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[66]">GPIO2_4_Handler</a> from startup_sse310mps3.o(.text.GPIO2_4_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[67]">GPIO2_5_Handler</a> from startup_sse310mps3.o(.text.GPIO2_5_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[68]">GPIO2_6_Handler</a> from startup_sse310mps3.o(.text.GPIO2_6_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[69]">GPIO2_7_Handler</a> from startup_sse310mps3.o(.text.GPIO2_7_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[6a]">GPIO2_8_Handler</a> from startup_sse310mps3.o(.text.GPIO2_8_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[6b]">GPIO2_9_Handler</a> from startup_sse310mps3.o(.text.GPIO2_9_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[40]">GPIO2_Combined_Handler</a> from startup_sse310mps3.o(.text.GPIO2_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[72]">GPIO3_0_Handler</a> from startup_sse310mps3.o(.text.GPIO3_0_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[73]">GPIO3_1_Handler</a> from startup_sse310mps3.o(.text.GPIO3_1_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[74]">GPIO3_2_Handler</a> from startup_sse310mps3.o(.text.GPIO3_2_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[75]">GPIO3_3_Handler</a> from startup_sse310mps3.o(.text.GPIO3_3_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[41]">GPIO3_Combined_Handler</a> from startup_sse310mps3.o(.text.GPIO3_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_sse310mps3.o(.text.HardFault_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[2c]">I2S_Handler</a> from startup_sse310mps3.o(.text.I2S_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[11]">MPC_Handler</a> from startup_sse310mps3.o(.text.MPC_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[13]">MSC_Handler</a> from startup_sse310mps3.o(.text.MSC_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_sse310mps3.o(.text.MemManage_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_sse310mps3.o(.text.NMI_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[c]">NONSEC_WATCHDOG_Handler</a> from startup_sse310mps3.o(.text.NONSEC_WATCHDOG_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[b]">NONSEC_WATCHDOG_RESET_REQ_Handler</a> from startup_sse310mps3.o(.text.NONSEC_WATCHDOG_RESET_REQ_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[12]">PPC_Handler</a> from startup_sse310mps3.o(.text.PPC_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from irq_armv8mml.o(.text) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_sse310mps3.o(.text.Reset_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[d]">SLOWCLK_Timer_Handler</a> from startup_sse310mps3.o(.text.SLOWCLK_Timer_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[2f]">SPI_ADC_Handler</a> from startup_sse310mps3.o(.text.SPI_ADC_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[30]">SPI_SHIELD0_Handler</a> from startup_sse310mps3.o(.text.SPI_SHIELD0_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[31]">SPI_SHIELD1_Handler</a> from startup_sse310mps3.o(.text.SPI_SHIELD1_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from irq_armv8mml.o(.text) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_sse310mps3.o(.text.SecureFault_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from irq_armv8mml.o(.text) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[1a]">System_Timestamp_Counter_Handler</a> from startup_sse310mps3.o(.text.System_Timestamp_Counter_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[e]">TFM_TIMER0_IRQ_Handler</a> from startup_sse310mps3.o(.text.TFM_TIMER0_IRQ_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[f]">TIMER1_Handler</a> from startup_sse310mps3.o(.text.TIMER1_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[10]">TIMER2_Handler</a> from startup_sse310mps3.o(.text.TIMER2_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[17]">TIMER3_AON_Handler</a> from startup_sse310mps3.o(.text.TIMER3_AON_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[2d]">TOUCH_SCREEN_Handler</a> from startup_sse310mps3.o(.text.TOUCH_SCREEN_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[25]">UART0_Combined_Handler</a> from startup_sse310mps3.o(.text.UART0_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[26]">UART1_Combined_Handler</a> from startup_sse310mps3.o(.text.UART1_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[27]">UART2_Combined_Handler</a> from startup_sse310mps3.o(.text.UART2_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[28]">UART3_Combined_Handler</a> from startup_sse310mps3.o(.text.UART3_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[29]">UART4_Combined_Handler</a> from startup_sse310mps3.o(.text.UART4_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[78]">UART5_Combined_Handler</a> from startup_sse310mps3.o(.text.UART5_Combined_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[2a]">UARTOVF_Handler</a> from startup_sse310mps3.o(.text.UARTOVF_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[1b]">UARTRX0_Handler</a> from startup_sse310mps3.o(.text.UARTRX0_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[1d]">UARTRX1_Handler</a> from startup_sse310mps3.o(.text.UARTRX1_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[1f]">UARTRX2_Handler</a> from startup_sse310mps3.o(.text.UARTRX2_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[21]">UARTRX3_Handler</a> from startup_sse310mps3.o(.text.UARTRX3_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[23]">UARTRX4_Handler</a> from startup_sse310mps3.o(.text.UARTRX4_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[76]">UARTRX5_Handler</a> from startup_sse310mps3.o(.text.UARTRX5_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[1c]">UARTTX0_Handler</a> from startup_sse310mps3.o(.text.UARTTX0_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[1e]">UARTTX1_Handler</a> from startup_sse310mps3.o(.text.UARTTX1_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[20]">UARTTX2_Handler</a> from startup_sse310mps3.o(.text.UARTTX2_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[22]">UARTTX3_Handler</a> from startup_sse310mps3.o(.text.UARTTX3_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[24]">UARTTX4_Handler</a> from startup_sse310mps3.o(.text.UARTTX4_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[77]">UARTTX5_Handler</a> from startup_sse310mps3.o(.text.UARTTX5_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[2e]">USB_Handler</a> from startup_sse310mps3.o(.text.USB_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_sse310mps3.o(.text.UsageFault_Handler) referenced from startup_sse310mps3.o(RESET)
 <LI><a href="#[82]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[83]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[85]">osRtxTimerSetup</a> from rtx_timer.o(.text.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[84]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[81]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced from rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[79]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[7a]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[7b]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[7c]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[7d]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[7e]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[7f]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[80]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8a]"></a>__main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d4]"></a>__scatterload_copy</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)

<P><STRONG><a name="[d5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[93]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_fp_1 &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[d6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[da]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[db]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[de]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[df]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[98]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[eb]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ec]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[ed]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[ee]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[f0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[f1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[f3]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[90]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[92]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[94]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[a1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[97]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[f5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[99]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, irq_armv8mml.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv8mml.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv8mml.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[9d]"></a>__rt_memcpy</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[f6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__rt_memcpy_w</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[fa]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>_memset</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_memset_w</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[96]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9a]"></a>_sys_exit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[fd]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_fp_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rtx_lib.o(.text.$Sub$$_fp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[14]"></a>BRIDGE_ERROR_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.BRIDGE_ERROR_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>COMBINED_PPU_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.COMBINED_PPU_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CPU0_CTI_0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.CPU0_CTI_0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CPU0_CTI_1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.CPU0_CTI_1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA_Ch_0_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_0_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA_Ch_0_Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_0_Error_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA_Ch_0_Terminal_Count_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_0_Terminal_Count_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA_Ch_1_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_1_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA_Ch_1_Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_1_Error_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA_Ch_1_Terminal_Count_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_1_Terminal_Count_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA_Ch_2_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_2_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA_Ch_2_Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_2_Error_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA_Ch_2_Terminal_Count_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_2_Terminal_Count_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA_Ch_3_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_3_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA_Ch_3_Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_3_Error_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA_Ch_3_Terminal_Count_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DMA_Ch_3_Terminal_Count_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ETHERNET_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.ETHERNET_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ETHOS_U55_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.ETHOS_U55_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIO0_0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPIO0_10_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_10_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPIO0_11_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_11_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPIO0_12_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_12_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>GPIO0_13_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_13_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>GPIO0_14_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_14_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>GPIO0_15_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_15_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIO0_1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIO0_2_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIO0_3_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPIO0_4_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPIO0_5_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPIO0_6_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_6_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPIO0_7_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_7_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIO0_8_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_8_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPIO0_9_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_9_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPIO0_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO0_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPIO1_0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>GPIO1_10_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_10_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO1_11_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_11_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIO1_12_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_12_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIO1_13_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_13_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPIO1_14_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_14_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIO1_15_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_15_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>GPIO1_1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO1_2_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>GPIO1_3_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIO1_4_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>GPIO1_5_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>GPIO1_6_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_6_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>GPIO1_7_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_7_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>GPIO1_8_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_8_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>GPIO1_9_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_9_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIO1_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO1_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIO2_0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIO2_10_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_10_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIO2_11_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_11_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIO2_12_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_12_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIO2_13_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_13_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIO2_14_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_14_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIO2_15_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_15_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIO2_1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIO2_2_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIO2_3_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIO2_4_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIO2_5_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIO2_6_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_6_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIO2_7_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_7_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIO2_8_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_8_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIO2_9_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_9_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIO2_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO2_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIO3_0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO3_0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIO3_1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO3_1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIO3_2_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO3_2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIO3_3_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO3_3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIO3_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.GPIO3_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2S_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.I2S_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MPC_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.MPC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>MSC_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.MSC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NONSEC_WATCHDOG_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.NONSEC_WATCHDOG_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NONSEC_WATCHDOG_RESET_REQ_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.NONSEC_WATCHDOG_RESET_REQ_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[12]"></a>PPC_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.PPC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, startup_sse310mps3.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Reset_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SLOWCLK_Timer_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.SLOWCLK_Timer_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI_ADC_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.SPI_ADC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI_SHIELD0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.SPI_SHIELD0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI_SHIELD1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.SPI_SHIELD1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.SecureFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>SystemInit</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, system_sse310mps3.o(.text.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1a]"></a>System_Timestamp_Counter_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.System_Timestamp_Counter_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TFM_TIMER0_IRQ_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.TFM_TIMER0_IRQ_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.TIMER1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.TIMER2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER3_AON_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.TIMER3_AON_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TOUCH_SCREEN_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.TOUCH_SCREEN_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>UART0_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UART0_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART1_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UART1_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART2_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UART2_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART3_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UART3_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>UART4_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UART4_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>UART5_Combined_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UART5_Combined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UARTOVF_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTOVF_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UARTRX0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTRX0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UARTRX1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTRX1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UARTRX2_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTRX2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UARTRX3_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTRX3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UARTRX4_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTRX4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>UARTRX5_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTRX5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UARTTX0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTTX0_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UARTTX1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTTX1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UARTTX2_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTTX2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UARTTX3_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTTX3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UARTTX4_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTTX4_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>UARTTX5_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UARTTX5_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USB_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.USB_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_sse310mps3.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_sse310mps3.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>_mutex_acquire</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[89]"></a>_mutex_free</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[86]"></a>_mutex_initialize</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtx_lib.o(.text._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _mutex_initialize &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[88]"></a>_mutex_release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_lib.o(.text._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[91]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[95]"></a>main</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = main
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cd]"></a>osKernelGetState</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[b0]"></a>osKernelInitialize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[b2]"></a>osMessageQueueGet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[b6]"></a>osMessageQueuePut</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[ab]"></a>osMutexAcquire</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[ac]"></a>osMutexDelete</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[ad]"></a>osMutexNew</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[af]"></a>osMutexRelease</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[b8]"></a>osRtxErrorNotify</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, rtx_config.o(.text.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[ae]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osRtxKernelErrorNotify &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[b1]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[ce]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[d0]"></a>osRtxMemoryFree</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[82]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[b7]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[ba]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[a4]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[bd]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[bf]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[9b]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[b5]"></a>osRtxPostProcess</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[c2]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[c1]"></a>osRtxThreadDispatch</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[a8]"></a>osRtxThreadListGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[c6]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>

<P><STRONG><a name="[c3]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[c0]"></a>osRtxThreadListSort</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
</UL>

<P><STRONG><a name="[c4]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[bb]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[cb]"></a>osRtxThreadSwitch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[c7]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[a6]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[9c]"></a>osRtxTick_Handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[85]"></a>osRtxTimerSetup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[84]"></a>osRtxTimerThread</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[a2]"></a>$Super$$_fp_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fpinit_81m.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[100]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit_81m.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[101]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit_81m.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[aa]"></a>os_kernel_is_active</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rtx_lib.o(.text.os_kernel_is_active), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[a3]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[79]"></a>svcRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[7a]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxKernelInitialize &rArr; OUTLINED_FUNCTION_0 &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[c5]"></a>osRtxThreadBlock</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[c8]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[c9]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[cc]"></a>TimerInsert</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[81]"></a>osRtxTimerTick</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; osRtxErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[7d]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[7e]"></a>svcRtxMutexDelete</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[7f]"></a>svcRtxMutexNew</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[80]"></a>svcRtxMutexRelease</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[b3]"></a>MessageQueueGet</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[bc]"></a>MessageQueuePut</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[b9]"></a>MessageQueueRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[a5]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[a7]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[83]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; OUTLINED_FUNCTION_0 &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[7b]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[be]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>

<P><STRONG><a name="[7c]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
